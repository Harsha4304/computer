#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define HASH_TABLE_SIZE 10

// Structure for a hash node
struct HashNode {
    int key;
    int value;
    struct HashNode* next;
};

// Structure for a hash table
struct HashTable {
    struct HashNode* table[HASH_TABLE_SIZE];
};

// Function to create a new hash node
struct HashNode* createHashNode(int key, int value) {
    struct HashNode* newNode = (struct HashNode*)malloc(sizeof(struct HashNode));
    newNode->key = key;
    newNode->value = value;
    newNode->next = NULL;
    return newNode;
}

// Function to initialize a hash table
void initializeHashTable(struct HashTable* ht) {
    for (int i = 0; i < HASH_TABLE_SIZE; i++) {
        ht->table[i] = NULL;
    }
}

// Function to compute the hash value
int hashFunction(int key) {
    return key % HASH_TABLE_SIZE;
}

// Function to insert a key-value pair into the hash table
void insert(struct HashTable* ht, int key, int value) {
    int index = hashFunction(key);
    
    // Create a new node
    struct HashNode* newNode = createHashNode(key, value);

    // Insert at the beginning of the linked list at the calculated index
    newNode->next = ht->table[index];
    ht->table[index] = newNode;
}

// Function to search for a key in the hash table and return its value
int search(struct HashTable* ht, int key) {
    int index = hashFunction(key);

    // Traverse the linked list at the calculated index
    struct HashNode* current = ht->table[index];
    while (current != NULL) {
        if (current->key == key) {
            return current->value;
        }
        current = current->next;
    }

    // Key not found
    return -1;
}

int main() {
    struct HashTable ht;
    initializeHashTable(&ht);

    // Insert key-value pairs
    insert(&ht, 5, 50);
    insert(&ht, 15, 150);
    insert(&ht, 25, 250);

    // Search for keys
    int result1 = search(&ht, 5);
    int result2 = search(&ht, 15);
    int result3 = search(&ht, 25);

    // Display results
    printf("Value for key 5: %d\n", result1);
    printf("Value for key 15: %d\n", result2);
    printf("Value for key 25: %d\n", result3);

    return 0;
}
